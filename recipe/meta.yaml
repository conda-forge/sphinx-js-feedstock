{% set name = "sphinx-js" %}
{% set version = "3.1" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 63523a57cf44a79feafc2876f5ecb5f4dde2f4e0f6dafaa73dc6040b57544292

build:
  noarch: python
  number: 0
  script: {{ PYTHON }} -m pip install . -vv --no-deps

requirements:
  host:
    - pip
    - python >=3.7
  run:
    - docutils
    - jinja2 >=2.0,<3.0
    - nodejs
    # TODO: should be pinned, needs historical version
    # - parsimonious >=0.7.0,<0.8.0
    - parsimonious
    - python >=3.7
    - sphinx >=3.0.0

test:
  requires:
    - pytest
    - python >=3.7
    - recommonmark
    - sphinx
    # - pip
  source_files:
    - tests
  imports:
    - sphinx_js
  commands:
    # TODO: still can't pip check because parsimonious
    # - python -m pip check

about:
  home: https://github.com/mozilla/sphinx-js
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: Autodoc-style extraction into Sphinx for your JS project

  description: |
    When you write a JavaScript library, how do you explain it to people? If
    it's a small project in a domain your users are familiar with, JSDoc's
    alphabetical list of routines might suffice. But in a larger project, it is
    useful to intersperse prose with your API docs without having to copy and
    paste things.

    sphinx-js lets you use the industry-leading Sphinx documentation tool with
    JS projects. It provides a handful of directives, patterned after the
    Python-centric autodoc ones, for pulling JSDoc-formatted documentation into
    reStructuredText pages. And, because you can keep using JSDoc in your code,
    you remain compatible with the rest of your JS tooling, like Google's
    Closure Compiler.

extra:
  recipe-maintainers:
    - bollwyvl
